#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = SLR
#RegularDefinitions

mai: [A-Z]
min: [a-z]
letra: {mai} | {min}

dig: [0-9]
inteiro: (0|[1-9]{dig}*)

prefixo:(_i|_f|_b|_s)
#Tokens
//palavra reservada
palavra_reservada: {min}+

//identificador
identificador: {prefixo}({min}(({min}|{dig})*|{mai}({min}|{dig}))*|{mai}(({min}|{dig})(({min}|{dig})*|{mai}({min}|{dig}))*({mai})?)?)

//constante_int
constante_int: {inteiro}

//constante_float
constante_float: {inteiro}\.({dig}+[1-9]|{dig})

//constante_string
constante_string: \"([^\n\"\\%]|%i|%f|%s|%b)*\"

//relação das palavras reservadas
//do else false fun if in main out repeat true  while

do = palavra_reservada: "do"
else = palavra_reservada: "else"
false = palavra_reservada: "false"
fun = palavra_reservada: "fun"
if = palavra_reservada: "if"
in = palavra_reservada: "in"
main = palavra_reservada: "main"
out = palavra_reservada: "out"
repeat = palavra_reservada: "repeat"
true = palavra_reservada: "true"
while = palavra_reservada: "while"


//relação dos símbolos especiais
//& | ! , ; = : ( ) { } == != < > + - * /
"&": "&"
"|": "|"
"!":"!"
",": ","
";": ";"
"=": "="
":": ":"
"(": "("
")": ")"
"{": "{"
"}": "}"
"==": "=="
"!=": "!="
"<": "<"
">": ">"
"+": "+"
"-": "-"
"*": "*"
"/": "/"

//reconhecer e ignorar caracteres de formatação
:[\s\t\n\r]

//reconhecer e ignorar comentários
:#[^\n]*
:\[([^\[\]])*\]
#NonTerminals
<programa>
<lista_de_instrucoes>
<instrucao>
<instrucao_>
<declaracao_de_constante>
<declaracao_de_variaveis>
<comando>
<lista_de_identificadores>
<valor>
<comando_atribuicao>
<comando_entrada_dados>
<comando_saida_dados>
<comando_selecao>
<comando_repeticao>
<lista_entrada>
<lista_entrada_>
<lista_entrada__>
<lista_expressoes>
<lista_expressoes_>
<lista_de_comandos>
<comando_else>
<comando_while>
<comando_repeat>
#Grammar
<programa> ::= fun main "{" <lista_de_instrucoes> "}" ;

<lista_de_instrucoes> ::= <instrucao> ";"<instrucao_>;

<instrucao> ::= <declaracao_de_constante> | <declaracao_de_variaveis> | <comando>;
<instrucao_> ::= <instrucao> <instrucao_> | î;

<declaracao_de_constante> ::= <lista_de_identificadores> ":" <valor>;

<lista_de_identificadores> ::= identificador <lista_de_identificadores_>;
<lista_de_identificadores_> :: "," identificador <lista_de_identificadores_> | î;

<valor> ::= constante_int | constante_float | constante_string | true | false;

<declaracao_de_variaveis> ::= <lista_de_identificadores>;

<comando> ::= <comando_atribuicao> | <comando_entrada_dados> | <comando_saida_dados> | <comando_selecao> | <comando_repeticao>;

<comando_atribuicao> ::= <lista_de_identificadores> "=" <expressao>;

<comando_entrada_dados> ::= in "(" <lista_entrada> ")";

<lista_entrada> ::= <lista_entrada_> <lista_de_identificadores> <lista_entrada__>;
<lista_entrada_> ::= constante_string "," | î;
<lista_entrada__> ::= ";" <lista_entrada> | î;

<comando_saida_dados> ::= out "(" <lista_expressoes> ")";

<lista_expressoes> ::= <expressao> <lista_expressoes_>;
<lista_expressoes_> ::= "," <lista_expressoes> | î;

<comando_selecao> ::= if "(" <expressao> ")" "{" <lista_de_comandos> "}" <comando_else>;
<comando_else> ::= else "{" <lista_de_comandos> "}" | î;

<lista_de_comandos> ::= <comando> ";" <lista_de_comandos_>;
<lista_de_comandos_> ::= <lista_de_comandos> | î;

<comando_repeticao> ::= <comando_while> | <comando_repeat>;
<comando_while> ::= while "(" <expressao> ")" do "{" <lista_de_comandos> "}";
<comando_repeat> ::= repeat "{" <lista_de_comandos> " ]" while "(" <expressao> ")";
